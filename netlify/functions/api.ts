import serverless from "serverless-http";
import { createServer } from "../../server";

const GEMINI_API_KEY = 'AIzaSyAuEgd_SIW8UYE0QqtR11SVXj3S8I6vIz0';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key=' + GEMINI_API_KEY;

// Product database for basic consultation (from products.ts)
const CANDLE_PRODUCTS = {
  'ph√≤ng ng·ªß': {
    name: 'N·∫øn H∆∞∆°ng O·∫£i H∆∞∆°ng Th∆∞ Gi√£n',
    scent: 'Lavender, Chamomile, Bergamot',
    benefit: 'Gi·∫£m stress, c·∫£i thi·ªán gi·∫•c ng·ªß',
    reason: 'Lavender c√≥ t√°c d·ª•ng an th·∫ßn, gi√∫p th∆∞ gi√£n s√¢u'
  },
  'ph√≤ng kh√°ch': {
    name: 'N·∫øn H∆∞∆°ng Vanilla Ng·ªçt Ng√†o',
    scent: 'Vanilla, Caramel, G·ªó ƒê√†n H∆∞∆°ng',
    benefit: 'T·∫°o c·∫£m gi√°c ·∫•m √°p, tho·∫£i m√°i',
    reason: 'Vanilla c√≥ t√°c d·ª•ng an th·∫ßn, gi·∫£m stress'
  },
  'l√£ng m·∫°n': {
    name: 'N·∫øn H∆∞∆°ng Hoa Nh√†i Tinh Khi·∫øt',
    scent: 'Hoa Nh√†i, Hoa H·ªìng, Hoa O·∫£i H∆∞∆°ng',
    benefit: 'TƒÉng c·∫£m x√∫c l√£ng m·∫°n, th∆∞ th√°i',
    reason: 'Hoa nh√†i gi√∫p c√¢n b·∫±ng c·∫£m x√∫c, t·∫°o s·ª± b√¨nh y√™n'
  },
  't·∫≠p trung': {
    name: 'N·∫øn H∆∞∆°ng B·∫°c H√† T∆∞∆°i M√°t',
    scent: 'Peppermint, Eucalyptus, Lemon',
    benefit: 'TƒÉng t·∫≠p trung, gi·∫£m ƒëau ƒë·∫ßu',
    reason: 'B·∫°c h√† c√≥ t√°c d·ª•ng k√≠ch th√≠ch tinh th·∫ßn, gi·∫£m m·ªát m·ªèi'
  },
  'thi·ªÅn ƒë·ªãnh': {
    name: 'N·∫øn H∆∞∆°ng Hoa Sen Thanh T·ªãnh',
    scent: 'Lotus, Bamboo, Green Tea',
    benefit: 'T·∫°o kh√¥ng gian tƒ©nh l·∫∑ng, thanh t·ªãnh',
    reason: 'Hoa sen t∆∞·ª£ng tr∆∞ng cho s·ª± b√¨nh y√™n v√† tinh khi·∫øt'
  }
};

// Emotional keywords mapping
const EMOTIONAL_KEYWORDS = {
  'bu·ªìn': 'sad',
  'stress': 'stressed',
  'm·ªát m·ªèi': 'tired',
  'cƒÉng th·∫≥ng': 'anxious',
  'vui': 'happy',
  'l√£ng m·∫°n': 'romantic',
  'th∆∞ gi√£n': 'relaxed',
  't·∫≠p trung': 'focused'
};

// Simple intent detection (fallback when Dialogflow is not available)
const detectIntentSimple = (message: string) => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
    return { intent: 'greeting', confidence: 0.9 };
  }
  
  if (lowerMessage.includes('t∆∞ v·∫•n') || lowerMessage.includes('n·∫øn') || lowerMessage.includes('g·ª£i √Ω')) {
    return { intent: 'product_consultation', confidence: 0.8 };
  }
  
  if (lowerMessage.includes('bu·ªìn') || lowerMessage.includes('stress') || lowerMessage.includes('m·ªát m·ªèi')) {
    return { intent: 'emotional_analysis', confidence: 0.9 };
  }
  
  if (lowerMessage.includes('gi√°') || lowerMessage.includes('bao nhi√™u')) {
    return { intent: 'price_inquiry', confidence: 0.8 };
  }
  
  if (lowerMessage.includes('c√°ch') || lowerMessage.includes('s·ª≠ d·ª•ng') || lowerMessage.includes('ƒë·ªët')) {
    return { intent: 'usage_guide', confidence: 0.8 };
  }
  
  return { intent: 'fallback', confidence: 0.5 };
};

// Handle different intents
const handleIntent = async (intent: string, message: string, confidence: number) => {
  switch (intent) {
    case 'greeting':
      return {
        text: `Xin ch√†o! T√¥i l√† chuy√™n gia t∆∞ v·∫•n n·∫øn th∆°m. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

‚Ä¢ T∆∞ v·∫•n n·∫øn ph√π h·ª£p v·ªõi kh√¥ng gian
‚Ä¢ G·ª£i √Ω n·∫øn d·ª±a tr√™n t√¢m tr·∫°ng  
‚Ä¢ H∆∞·ªõng d·∫´n c√°ch s·ª≠ d·ª•ng n·∫øn

B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ h√¥m nay? üòä`,
        type: 'basic',
        source: 'dialogflow'
      };
    
    case 'product_consultation':
      const roomType = extractRoomType(message);
      const product = CANDLE_PRODUCTS[roomType as keyof typeof CANDLE_PRODUCTS] || CANDLE_PRODUCTS['ph√≤ng kh√°ch'];
      
      return {
        text: `T√¥i s·∫Ω t∆∞ v·∫•n n·∫øn ph√π h·ª£p cho b·∫°n! üå∏

D·ª±a tr√™n nhu c·∫ßu c·ªßa b·∫°n, t√¥i g·ª£i √Ω:

‚ú® **${product.name}**
üåø H∆∞∆°ng th∆°m: ${product.scent}
üíù L·ª£i √≠ch: ${product.benefit}
üí° L√Ω do: ${product.reason}

B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch t√¢m tr·∫°ng ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω c√° nh√¢n h√≥a kh√¥ng?`,
        type: 'product',
        source: 'dialogflow',
        product: product
      };
    
    case 'emotional_analysis':
      // Use Gemini for emotional analysis
      return await handleEmotionalAnalysis(message);
    
    case 'price_inquiry':
      return {
        text: `Gi√° n·∫øn th∆°m t·ª´ 150k-350k t√πy lo·∫°i:

‚Ä¢ N·∫øn c∆° b·∫£n: 150k-200k
‚Ä¢ N·∫øn cao c·∫•p: 200k-250k  
‚Ä¢ N·∫øn ƒë·∫∑c bi·ªát: 250k-350k

B·∫°n quan t√¢m ƒë·∫øn lo·∫°i n·∫øn n√†o? T√¥i s·∫Ω t∆∞ v·∫•n chi ti·∫øt h∆°n.`,
        type: 'basic',
        source: 'dialogflow'
      };
    
    case 'usage_guide':
      return {
        text: `H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng n·∫øn th∆°m:

üïØÔ∏è **C√°ch ƒë·ªët n·∫øn:**
‚Ä¢ ƒê·ªët t·ªëi ƒëa 4 gi·ªù/l·∫ßn
‚Ä¢ ƒê·ªÉ n·∫øn ch√°y √≠t nh·∫•t 1 gi·ªù ƒë·∫ßu
‚Ä¢ Kh√¥ng ƒë·ªÉ n·∫øn g·∫ßn gi√≥ m·∫°nh

‚è∞ **Th·ªùi gian ch√°y:**
‚Ä¢ M·ªói n·∫øn ch√°y 40-50 gi·ªù
‚Ä¢ N√™n ƒë·ªët 2-3 l·∫ßn/tu·∫ßn

üí° **L∆∞u √Ω an to√†n:**
‚Ä¢ Kh√¥ng ƒë·ªÉ tr·∫ª em ch∆°i g·∫ßn n·∫øn
‚Ä¢ T·∫Øt n·∫øn khi ra kh·ªèi ph√≤ng

B·∫°n c·∫ßn t∆∞ v·∫•n th√™m g√¨ kh√¥ng?`,
        type: 'basic',
        source: 'dialogflow'
      };
    
    default:
      // Fallback to Gemini
      return await handleGeminiOnly(message);
  }
};

// Extract room type from message
const extractRoomType = (message: string): string => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('ph√≤ng ng·ªß') || lowerMessage.includes('ng·ªß')) {
    return 'ph√≤ng ng·ªß';
  } else if (lowerMessage.includes('ph√≤ng kh√°ch') || lowerMessage.includes('kh√°ch')) {
    return 'ph√≤ng kh√°ch';
  } else if (lowerMessage.includes('l√£ng m·∫°n') || lowerMessage.includes('romantic')) {
    return 'l√£ng m·∫°n';
  } else if (lowerMessage.includes('t·∫≠p trung') || lowerMessage.includes('l√†m vi·ªác')) {
    return 't·∫≠p trung';
  } else if (lowerMessage.includes('thi·ªÅn') || lowerMessage.includes('meditation')) {
    return 'thi·ªÅn ƒë·ªãnh';
  }
  
  return 'ph√≤ng kh√°ch'; // Default
};

// Handle emotional analysis with Gemini
const handleEmotionalAnalysis = async (message: string) => {
  const emotionalPrompt = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n n·∫øn th∆°m. Kh√°ch h√†ng n√≥i: "${message}"

H√£y ph√¢n t√≠ch t√¢m tr·∫°ng v√† ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ n·∫øn th∆°m ph√π h·ª£p. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† th√¢n thi·ªán.

G·ª£i √Ω n·∫øn th∆°m d·ª±a tr√™n:
- T√¢m tr·∫°ng bu·ªìn/stress: O·∫£i h∆∞∆°ng, Hoa c√∫c
- T√¢m tr·∫°ng vui: Cam qu√Ωt, Vanilla  
- C·∫ßn t·∫≠p trung: B·∫°c h√†, G·ªó tuy·∫øt t√πng
- L√£ng m·∫°n: Hoa nh√†i, Hoa h·ªìng

Tr·∫£ l·ªùi trong 2-3 c√¢u, k√®m emoji ph√π h·ª£p.`;

  const body = {
    contents: [{ role: 'user', parts: [{ text: emotionalPrompt }] }],
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 200,
    },
  };
  
  try {
    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    
    const data = await response.json();
    const responseText = data?.candidates?.[0]?.content?.parts?.[0]?.text || 
      'T√¥i hi·ªÉu c·∫£m x√∫c c·ªßa b·∫°n. H√£y th·ª≠ n·∫øn o·∫£i h∆∞∆°ng ƒë·ªÉ th∆∞ gi√£n nh√©! üíú';
    
    return {
      text: responseText,
      type: 'emotional',
      source: 'hybrid'
    };
  } catch (error) {
    return {
      text: 'T√¥i hi·ªÉu c·∫£m x√∫c c·ªßa b·∫°n. H√£y th·ª≠ n·∫øn o·∫£i h∆∞∆°ng ƒë·ªÉ th∆∞ gi√£n nh√©! üíú',
      type: 'emotional',
      source: 'fallback'
    };
  }
};

// Fallback to current Gemini-only implementation
const handleGeminiOnly = async (message: string) => {
  const isEmotionalQuery = Object.keys(EMOTIONAL_KEYWORDS).some(keyword => 
    message.toLowerCase().includes(keyword)
  );
  
  if (isEmotionalQuery) {
    return await handleEmotionalAnalysis(message);
  } else {
    // Basic product consultation using predefined responses
    const lowerMessage = message.toLowerCase();
    let product = null;
    
    // Find matching product
    for (const [key, value] of Object.entries(CANDLE_PRODUCTS)) {
      if (lowerMessage.includes(key)) {
        product = value;
        break;
      }
    }
    
    if (product) {
      return {
        text: `‚ú® **${product.name}**\n\nüåø **H∆∞∆°ng th∆°m:** ${product.scent}\nüíù **L·ª£i √≠ch:** ${product.benefit}\nüí° **L√Ω do:** ${product.reason}\n\nB·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n th√™m v·ªÅ s·∫£n ph·∫©m kh√°c kh√¥ng?`,
        type: 'product',
        source: 'gemini'
      };
    } else {
      // Fallback to Gemini for general questions
      const generalPrompt = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n n·∫øn th∆°m. Kh√°ch h√†ng h·ªèi: "${message}"

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát v·ªÅ n·∫øn th∆°m. N·∫øu kh√¥ng li√™n quan ƒë·∫øn n·∫øn th∆°m, h√£y chuy·ªÉn h∆∞·ªõng v·ªÅ ch·ªß ƒë·ªÅ n·∫øn th∆°m m·ªôt c√°ch kh√©o l√©o.

Tr·∫£ l·ªùi trong 2-3 c√¢u, k√®m emoji.`;

      const body = {
        contents: [{ role: 'user', parts: [{ text: generalPrompt }] }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 150,
        },
      };
      
      try {
        const response = await fetch(GEMINI_API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body),
        });
        
        const data = await response.json();
        const responseText = data?.candidates?.[0]?.content?.parts?.[0]?.text || 
          'T√¥i c√≥ th·ªÉ t∆∞ v·∫•n cho b·∫°n v·ªÅ c√°c lo·∫°i n·∫øn th∆°m ph√π h·ª£p. B·∫°n quan t√¢m ƒë·∫øn m√πi h∆∞∆°ng n√†o? üòä';
        
        return {
          text: responseText,
          type: 'basic',
          source: 'gemini'
        };
      } catch (error) {
        return {
          text: 'T√¥i c√≥ th·ªÉ t∆∞ v·∫•n cho b·∫°n v·ªÅ c√°c lo·∫°i n·∫øn th∆°m ph√π h·ª£p. B·∫°n quan t√¢m ƒë·∫øn m√πi h∆∞∆°ng n√†o? üòä',
          type: 'basic',
          source: 'fallback'
        };
      }
    }
  }
};

export async function handler(event: any) {
  if (event.httpMethod === 'OPTIONS') {
    // Handle preflight CORS
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': 'https://one0077.onrender.com',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
      body: '',
    };
  }
  if (event.httpMethod === 'POST' && event.path === '/.netlify/functions/api/chatbot') {
    try {
      const { message, sessionId, context } = JSON.parse(event.body || '{}');
      
      // Step 1: Intent Detection (Simple fallback when Dialogflow is not available)
      const intentResult = detectIntentSimple(message);
      
      // Step 2: Handle intent with appropriate response
      const response = await handleIntent(intentResult.intent, message, intentResult.confidence);
      
      return {
        statusCode: 200,
        headers: {
          'Access-Control-Allow-Origin': 'https://one0077.onrender.com',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type',
        },
        body: JSON.stringify(response),
      };
    } catch (e) {
      return {
        statusCode: 500,
        headers: {
          'Access-Control-Allow-Origin': 'https://one0077.onrender.com',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type',
        },
        body: JSON.stringify({ 
          error: 'L·ªói m√°y ch·ªß ho·∫∑c API Gemini.',
          type: 'basic',
          text: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.'
        }),
      };
    }
  }
}
