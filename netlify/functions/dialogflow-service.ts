import { SessionsClient } from '@google-cloud/dialogflow';

interface DialogflowResponse {
  intent: string;
  confidence: number;
  parameters: any;
  response: string;
}

export class DialogflowService {
  private sessionClient: SessionsClient;
  private projectId: string;

  constructor() {
    this.projectId = process.env.DIALOGFLOW_PROJECT_ID || '';
    if (!this.projectId) {
      throw new Error('DIALOGFLOW_PROJECT_ID not configured');
    }
    
    // For Netlify Functions, we'll use API key authentication
    this.sessionClient = new SessionsClient({
      keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS || undefined,
      apiEndpoint: 'dialogflow.googleapis.com'
    });
  }

  async detectIntent(sessionId: string, message: string): Promise<DialogflowResponse> {
    try {
      const sessionPath = this.sessionClient.projectAgentSessionPath(this.projectId, sessionId);
      
      const request = {
        session: sessionPath,
        queryInput: {
          text: {
            text: message,
            languageCode: 'vi',
          },
        },
      };

      const responses = await this.sessionClient.detectIntent(request);
      const result = responses[0].queryResult;

      return {
        intent: result?.intent?.displayName || 'fallback',
        confidence: result?.intentDetectionConfidence || 0,
        parameters: result?.parameters || {},
        response: result?.fulfillmentText || 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?'
      };
    } catch (error) {
      console.error('Dialogflow Error:', error);
      return {
        intent: 'fallback',
        confidence: 0,
        parameters: {},
        response: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.'
      };
    }
  }

  async handleWebhook(body: any): Promise<any> {
    try {
      const { queryResult } = body;
      const intent = queryResult?.intent?.displayName;
      const parameters = queryResult?.parameters || {};
      const userMessage = queryResult?.queryText || '';

      // Handle different intents
      switch (intent) {
        case 'greeting':
          return this.handleGreeting();
        
        case 'product_consultation':
          return this.handleProductConsultation(userMessage, parameters);
        
        case 'emotional_analysis':
          return this.handleEmotionalAnalysis(userMessage);
        
        case 'price_inquiry':
          return this.handlePriceInquiry();
        
        case 'usage_guide':
          return this.handleUsageGuide();
        
        default:
          return this.handleFallback();
      }
    } catch (error) {
      console.error('Webhook Error:', error);
      return this.handleFallback();
    }
  }

  private handleGreeting() {
    return {
      fulfillmentText: `Xin ch√†o! T√¥i l√† chuy√™n gia t∆∞ v·∫•n n·∫øn th∆°m. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

‚Ä¢ T∆∞ v·∫•n n·∫øn ph√π h·ª£p v·ªõi kh√¥ng gian
‚Ä¢ G·ª£i √Ω n·∫øn d·ª±a tr√™n t√¢m tr·∫°ng  
‚Ä¢ H∆∞·ªõng d·∫´n c√°ch s·ª≠ d·ª•ng n·∫øn

B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ h√¥m nay? üòä`,
      source: 'dialogflow'
    };
  }

  private handleProductConsultation(userMessage: string, parameters: any) {
    const roomType = parameters.room_type || this.extractRoomType(userMessage);
    
    const productRecommendations = {
      'ph√≤ng ng·ªß': {
        name: 'N·∫øn H∆∞∆°ng O·∫£i H∆∞∆°ng Th∆∞ Gi√£n',
        scent: 'Lavender, Chamomile, Bergamot',
        benefit: 'Gi·∫£m stress, c·∫£i thi·ªán gi·∫•c ng·ªß',
        reason: 'Lavender c√≥ t√°c d·ª•ng an th·∫ßn, gi√∫p th∆∞ gi√£n s√¢u'
      },
      'ph√≤ng kh√°ch': {
        name: 'N·∫øn H∆∞∆°ng Vanilla Ng·ªçt Ng√†o',
        scent: 'Vanilla, Caramel, G·ªó ƒê√†n H∆∞∆°ng',
        benefit: 'T·∫°o c·∫£m gi√°c ·∫•m √°p, tho·∫£i m√°i',
        reason: 'Vanilla c√≥ t√°c d·ª•ng an th·∫ßn, gi·∫£m stress'
      },
      'l√£ng m·∫°n': {
        name: 'N·∫øn H∆∞∆°ng Hoa Nh√†i Tinh Khi·∫øt',
        scent: 'Hoa Nh√†i, Hoa H·ªìng, Hoa O·∫£i H∆∞∆°ng',
        benefit: 'TƒÉng c·∫£m x√∫c l√£ng m·∫°n, th∆∞ th√°i',
        reason: 'Hoa nh√†i gi√∫p c√¢n b·∫±ng c·∫£m x√∫c, t·∫°o s·ª± b√¨nh y√™n'
      },
      't·∫≠p trung': {
        name: 'N·∫øn H∆∞∆°ng B·∫°c H√† T∆∞∆°i M√°t',
        scent: 'Peppermint, Eucalyptus, Lemon',
        benefit: 'TƒÉng t·∫≠p trung, gi·∫£m ƒëau ƒë·∫ßu',
        reason: 'B·∫°c h√† c√≥ t√°c d·ª•ng k√≠ch th√≠ch tinh th·∫ßn, gi·∫£m m·ªát m·ªèi'
      },
      'thi·ªÅn ƒë·ªãnh': {
        name: 'N·∫øn H∆∞∆°ng Hoa Sen Thanh T·ªãnh',
        scent: 'Lotus, Bamboo, Green Tea',
        benefit: 'T·∫°o kh√¥ng gian tƒ©nh l·∫∑ng, thanh t·ªãnh',
        reason: 'Hoa sen t∆∞·ª£ng tr∆∞ng cho s·ª± b√¨nh y√™n v√† tinh khi·∫øt'
      }
    };

    const product = productRecommendations[roomType] || productRecommendations['ph√≤ng kh√°ch'];

    return {
      fulfillmentText: `T√¥i s·∫Ω t∆∞ v·∫•n n·∫øn ph√π h·ª£p cho b·∫°n! üå∏

D·ª±a tr√™n nhu c·∫ßu c·ªßa b·∫°n, t√¥i g·ª£i √Ω:

‚ú® **${product.name}**
üåø H∆∞∆°ng th∆°m: ${product.scent}
üíù L·ª£i √≠ch: ${product.benefit}
üí° L√Ω do: ${product.reason}

B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch t√¢m tr·∫°ng ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω c√° nh√¢n h√≥a kh√¥ng?`,
      source: 'dialogflow',
      type: 'product',
      product: product
    };
  }

  private handleEmotionalAnalysis(userMessage: string) {
    return {
      fulfillmentText: `T√¥i hi·ªÉu c·∫£m x√∫c c·ªßa b·∫°n! üíú

H√£y ƒë·ªÉ t√¥i ph√¢n t√≠ch v√† ƒë∆∞a ra g·ª£i √Ω n·∫øn th∆°m ph√π h·ª£p nh·∫•t v·ªõi t√¢m tr·∫°ng hi·ªán t·∫°i c·ªßa b·∫°n.`,
      source: 'dialogflow',
      type: 'emotional',
      requiresGemini: true // Flag ƒë·ªÉ backend g·ªçi Gemini
    };
  }

  private handlePriceInquiry() {
    return {
      fulfillmentText: `Gi√° n·∫øn th∆°m t·ª´ 150k-350k t√πy lo·∫°i:

‚Ä¢ N·∫øn c∆° b·∫£n: 150k-200k
‚Ä¢ N·∫øn cao c·∫•p: 200k-250k  
‚Ä¢ N·∫øn ƒë·∫∑c bi·ªát: 250k-350k

B·∫°n quan t√¢m ƒë·∫øn lo·∫°i n·∫øn n√†o? T√¥i s·∫Ω t∆∞ v·∫•n chi ti·∫øt h∆°n.`,
      source: 'dialogflow'
    };
  }

  private handleUsageGuide() {
    return {
      fulfillmentText: `H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng n·∫øn th∆°m:

üïØÔ∏è **C√°ch ƒë·ªët n·∫øn:**
‚Ä¢ ƒê·ªët t·ªëi ƒëa 4 gi·ªù/l·∫ßn
‚Ä¢ ƒê·ªÉ n·∫øn ch√°y √≠t nh·∫•t 1 gi·ªù ƒë·∫ßu
‚Ä¢ Kh√¥ng ƒë·ªÉ n·∫øn g·∫ßn gi√≥ m·∫°nh

‚è∞ **Th·ªùi gian ch√°y:**
‚Ä¢ M·ªói n·∫øn ch√°y 40-50 gi·ªù
‚Ä¢ N√™n ƒë·ªët 2-3 l·∫ßn/tu·∫ßn

üí° **L∆∞u √Ω an to√†n:**
‚Ä¢ Kh√¥ng ƒë·ªÉ tr·∫ª em ch∆°i g·∫ßn n·∫øn
‚Ä¢ T·∫Øt n·∫øn khi ra kh·ªèi ph√≤ng

B·∫°n c·∫ßn t∆∞ v·∫•n th√™m g√¨ kh√¥ng?`,
      source: 'dialogflow'
    };
  }

  private handleFallback() {
    return {
      fulfillmentText: 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu r√µ. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ nhu c·∫ßu c·ªßa m√¨nh kh√¥ng? T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ n·∫øn th∆°m ph√π h·ª£p v·ªõi kh√¥ng gian ho·∫∑c t√¢m tr·∫°ng c·ªßa b·∫°n.',
      source: 'dialogflow'
    };
  }

  private extractRoomType(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('ph√≤ng ng·ªß') || lowerMessage.includes('ng·ªß')) {
      return 'ph√≤ng ng·ªß';
    } else if (lowerMessage.includes('ph√≤ng kh√°ch') || lowerMessage.includes('kh√°ch')) {
      return 'ph√≤ng kh√°ch';
    } else if (lowerMessage.includes('l√£ng m·∫°n') || lowerMessage.includes('romantic')) {
      return 'l√£ng m·∫°n';
    } else if (lowerMessage.includes('t·∫≠p trung') || lowerMessage.includes('l√†m vi·ªác')) {
      return 't·∫≠p trung';
    } else if (lowerMessage.includes('thi·ªÅn') || lowerMessage.includes('meditation')) {
      return 'thi·ªÅn ƒë·ªãnh';
    }
    
    return 'ph√≤ng kh√°ch'; // Default
  }
} 